{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as tf from '@tensorflow/tfjs';\nimport { bundleResourceIO } from '@tensorflow/tfjs-react-native';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useEffect, useState } from 'react';\nimport * as jpeg from 'jpeg-js';\nimport * as WebBrowser from 'expo-web-browser';\nimport ImagePickerAndResizer from \"./ImagePickerAndResizer\";\nimport { GLView } from 'expo-gl';\nimport { Camera } from 'expo-camera';\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar model;\nvar labels;\nexport default function Predictions() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isModelLoaded = _useState2[0],\n    setIsModelLoaded = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedImage = _useState4[0],\n    setSelectedImage = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    predictions = _useState6[0],\n    setPredictions = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    model = _useState8[0],\n    setModel = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isLoadingPredictions = _useState10[0],\n    setIsLoadingPredictions = _useState10[1];\n  useEffect(function () {\n    if (!model) {\n      loadModel();\n    }\n  }, []);\n  var loadModel = function () {\n    var _ref = _asyncToGenerator(function* () {\n      console.log('Starting model loading...');\n      yield tf.ready();\n      console.log('TensorFlow.js is ready...');\n      var modelJson = require(\"../assets/tfjs_model/model.json\");\n      var modelWeights = [require(\"../assets/tfjs_model/group1-shard1of5.bin\"), require(\"../assets/tfjs_model/group1-shard2of5.bin\"), require(\"../assets/tfjs_model/group1-shard3of5.bin\"), require(\"../assets/tfjs_model/group1-shard4of5.bin\"), require(\"../assets/tfjs_model/group1-shard5of5.bin\")];\n      var model = yield tf.loadLayersModel(bundleResourceIO(modelJson, modelWeights));\n      console.log(model.summary());\n      setIsModelLoaded(true);\n      setModel(model);\n      console.log('Loading labels...');\n      labels = require(\"../assets/tfjs_model/labels.json\");\n      console.log('Labels are loaded...');\n      console.log('Model is loaded...');\n    });\n    return function loadModel() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handlePress = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      if (model && selectedImage) {\n        console.log(selectedImage);\n        setIsLoadingPredictions(true);\n        var response = yield fetch(selectedImage.uri, {}, {\n          isBinary: true\n        });\n        var imageData = yield response.arrayBuffer();\n        var rawImageData = jpeg.decode(imageData, true).data;\n        var rgbData = [];\n        for (var i = 0; i < rawImageData.length; i += 4) {\n          rgbData.push(rawImageData[i], rawImageData[i + 1], rawImageData[i + 2]);\n        }\n        var imageTensor = tf.tensor3d(rgbData, [selectedImage.height, selectedImage.width, 3]).resizeNearestNeighbor([150, 150]).expandDims().toFloat().reverse(-1);\n        var prediction = model.predict(imageTensor);\n        console.log('Raw prediction output:', prediction.dataSync());\n        var values = prediction.dataSync();\n        var indices = prediction.argMax(-1).dataSync();\n        var newPredictions = labels.map(function (label, index) {\n          return {\n            label: label,\n            probability: values[index] || 0\n          };\n        });\n        newPredictions.sort(function (a, b) {\n          return b.probability - a.probability;\n        });\n        setPredictions(newPredictions);\n        setIsLoadingPredictions(false);\n        newPredictions.slice(0, 4).forEach(function (prediction, index) {\n          console.log(`${index + 1}: ${prediction.label} (${prediction.probability.toFixed(2)})`);\n        });\n      }\n    });\n    return function handlePress() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(ScrollView, {\n      contentContainerStyle: [styles.scrollViewContainer, {\n        flex: selectedImage ? 0 : 1\n      }],\n      showsVerticalScrollIndicator: false,\n      children: !isModelLoaded ? _jsxs(_Fragment, {\n        children: [_jsx(Text, {\n          style: styles.modelText,\n          children: \"Loading model, Please wait..\"\n        }), _jsx(ActivityIndicator, {\n          size: \"large\",\n          color: \"#0000ff\",\n          animating: !isModelLoaded\n        })]\n      }) : _jsxs(_Fragment, {\n        children: [_jsx(ImagePickerAndResizer, {\n          selectedImage: selectedImage,\n          setSelectedImage: setSelectedImage\n        }), isLoadingPredictions ? _jsx(ActivityIndicator, {\n          size: \"large\",\n          color: \"#0000ff\"\n        }) : _jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: handlePress,\n          children: _jsx(Text, {\n            style: styles.btnText,\n            children: \"Predict\"\n          })\n        }), predictions.length > 0 && _jsxs(View, {\n          style: styles.predictionsContainer,\n          children: [_jsx(Text, {\n            style: styles.modelText,\n            children: \"Predictions:\"\n          }), predictions.map(function (prediction, i) {\n            return _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                return WebBrowser.openBrowserAsync(`https://www.google.com/search?tbm=isch&q=${encodeURIComponent(prediction.label)}`);\n              },\n              children: _jsx(Text, {\n                style: styles.predictions,\n                children: `${i + 1}: ${prediction.label} (${prediction.probability.toFixed(2)})`\n              })\n            }, i);\n          })]\n        })]\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F9F7F7',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%'\n  },\n  scrollViewContainer: {\n    minWidth: '100%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    padding: 10,\n    backgroundColor: '#3F72AF',\n    borderRadius: 5,\n    margin: 5,\n    borderColor: '#112D4E',\n    borderWidth: 1,\n    shadowColor: '#112D4E',\n    shadowOpacity: 0.5,\n    shadowRadius: 8,\n    shadowOffset: {\n      width: 0,\n      height: 0\n    },\n    elevation: 5\n  },\n  predictions: {\n    textAlign: 'left',\n    color: '#112D4E',\n    fontSize: 16,\n    margin: 10,\n    fontWeight: 'bold'\n  },\n  modelText: {\n    textAlign: 'center',\n    fontSize: 22,\n    margin: 8,\n    fontWeight: 'bold'\n  },\n  btnText: {\n    textAlign: 'center',\n    fontSize: 18,\n    color: '#F9F7F7',\n    fontWeight: '600'\n  },\n  predictionsContainer: {\n    alignItems: 'flex-start',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["tf","bundleResourceIO","StyleSheet","Text","TouchableOpacity","ActivityIndicator","ScrollView","View","React","useEffect","useState","jpeg","WebBrowser","ImagePickerAndResizer","GLView","Camera","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","model","labels","Predictions","_useState","_useState2","_slicedToArray","isModelLoaded","setIsModelLoaded","_useState3","_useState4","selectedImage","setSelectedImage","_useState5","_useState6","predictions","setPredictions","_useState7","_useState8","setModel","_useState9","_useState10","isLoadingPredictions","setIsLoadingPredictions","loadModel","_ref","_asyncToGenerator","console","log","ready","modelJson","require","modelWeights","loadLayersModel","summary","apply","arguments","handlePress","_ref2","response","fetch","uri","isBinary","imageData","arrayBuffer","rawImageData","decode","data","rgbData","i","length","push","imageTensor","tensor3d","height","width","resizeNearestNeighbor","expandDims","toFloat","reverse","prediction","predict","dataSync","values","indices","argMax","newPredictions","map","label","index","probability","sort","a","b","slice","forEach","toFixed","style","styles","container","children","contentContainerStyle","scrollViewContainer","flex","showsVerticalScrollIndicator","modelText","size","color","animating","button","onPress","btnText","predictionsContainer","openBrowserAsync","encodeURIComponent","create","backgroundColor","alignItems","justifyContent","minWidth","padding","borderRadius","margin","borderColor","borderWidth","shadowColor","shadowOpacity","shadowRadius","shadowOffset","elevation","textAlign","fontSize","fontWeight"],"sources":["D:/TensorflowReactNative/Components/Predictions.js"],"sourcesContent":["import * as tf from '@tensorflow/tfjs';\r\nimport { bundleResourceIO } from '@tensorflow/tfjs-react-native';\r\nimport { StyleSheet, Text, TouchableOpacity, ActivityIndicator, ScrollView, View } from 'react-native';\r\nimport React, { useEffect, useState } from 'react';\r\nimport * as jpeg from 'jpeg-js';\r\nimport * as WebBrowser from 'expo-web-browser';\r\nimport ImagePickerAndResizer from './ImagePickerAndResizer';\r\nimport { GLView } from 'expo-gl';\r\nimport { Camera } from 'expo-camera';\r\n\r\nlet model; // Declare model variable outside of the component\r\nlet labels; // Declare labels variable outside of the component\r\n\r\nexport default function Predictions() {\r\n const [isModelLoaded, setIsModelLoaded] = useState(false);\r\n const [selectedImage, setSelectedImage] = useState(null);\r\n const [predictions, setPredictions] = useState([]);\r\n const [model, setModel] = useState(null);\r\n const [isLoadingPredictions, setIsLoadingPredictions] = useState(false);\r\n\r\n useEffect(() => {\r\n    if (!model) { // Only load the model if it's not already loaded\r\n      loadModel();\r\n    }\r\n }, []);\r\n\r\n const loadModel = async () => {\r\n    console.log('Starting model loading...');\r\n    await tf.ready();\r\n    console.log('TensorFlow.js is ready...');\r\n    const modelJson = require('../assets/tfjs_model/model.json');\r\n\r\n    const modelWeights = [\r\n        require(\"../assets/tfjs_model/group1-shard1of5.bin\"),\r\n        require(\"../assets/tfjs_model/group1-shard2of5.bin\"),\r\n        require(\"../assets/tfjs_model/group1-shard3of5.bin\"),\r\n        require(\"../assets/tfjs_model/group1-shard4of5.bin\"),\r\n        require(\"../assets/tfjs_model/group1-shard5of5.bin\"),\r\n      ];\r\n  \r\n      const model = await tf.loadLayersModel(\r\n        bundleResourceIO(modelJson, modelWeights),\r\n      );\r\n      console.log(model.summary());\r\n  \r\n      setIsModelLoaded(true);\r\n      setModel(model)\r\n  \r\n      // Load labels\r\n      console.log('Loading labels...');\r\n      labels = require('../assets/tfjs_model/labels.json');\r\n      console.log('Labels are loaded...');\r\n      console.log('Model is loaded...');\r\n   };\r\n\r\n const handlePress = async () => {\r\n    if (model && selectedImage) {\r\n        console.log(selectedImage);\r\n        setIsLoadingPredictions(true); // Start loading\r\n        // Load image\r\n        const response = await fetch(selectedImage.uri, {}, { isBinary: true });\r\n        const imageData = await response.arrayBuffer();\r\n        const rawImageData = jpeg.decode(imageData, true).data;\r\n        \r\n        // Remove alpha channel\r\n        const rgbData = [];\r\n        for (let i = 0; i < rawImageData.length; i += 4) {\r\n            rgbData.push(rawImageData[i], rawImageData[i+1], rawImageData[i+2]);\r\n        }\r\n\r\n        let imageTensor = tf.tensor3d(rgbData, [selectedImage.height, selectedImage.width, 3]).resizeNearestNeighbor([150,150]).expandDims().toFloat().reverse(-1);\r\n\r\n        // Preprocess image\r\n    //   const resizedImageTensor = tf.image.resizeBilinear(imageTensor, [150,150]);\r\n    //   const offset = tf.scalar(127.5);\r\n    //   const normalizedImageTensor = resizedImageTensor.sub(offset).div(offset);\r\n    //   const batchedImageTensor = normalizedImageTensor.expandDims(0);\r\n\r\n        // Make prediction\r\n        const prediction = model.predict(imageTensor);\r\n\r\n        // Log raw prediction output\r\n        console.log('Raw prediction output:', prediction.dataSync());\r\n\r\n        // Set predictions state\r\n        const values = prediction.dataSync();\r\n        const indices = prediction.argMax(-1).dataSync();\r\n\r\n        const newPredictions = labels.map((label, index) => ({\r\n            label,\r\n            probability: values[index] || 0, // Use 0 if the probability is undefined\r\n        }));\r\n\r\n        // Sort predictions by probability in descending order\r\n        newPredictions.sort((a, b) => b.probability - a.probability);\r\n\r\n        // Update predictions state\r\n        setPredictions(newPredictions);\r\n\r\n        setIsLoadingPredictions(false); // End loading\r\n\r\n        // Print top 10 predictions\r\n        newPredictions.slice(0, 4).forEach((prediction, index) => {\r\n            console.log(`${index + 1}: ${prediction.label} (${prediction.probability.toFixed(2)})`);\r\n        });\r\n    }\r\n};\r\n\r\n return (\r\n    <View style={styles.container}>\r\n        <ScrollView contentContainerStyle={[styles.scrollViewContainer, { flex: selectedImage ? 0 : 1 }]} showsVerticalScrollIndicator={false}>\r\n            {!isModelLoaded ? (\r\n                <>\r\n                    <Text style={styles.modelText}>Loading model, Please wait..</Text>\r\n                    <ActivityIndicator size=\"large\" color=\"#0000ff\" animating={!isModelLoaded} />\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <ImagePickerAndResizer selectedImage={selectedImage} setSelectedImage={setSelectedImage} />\r\n                    {isLoadingPredictions ? (\r\n                        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n                    ) : (\r\n                        <TouchableOpacity style={styles.button} onPress={handlePress}>\r\n                            <Text style={styles.btnText}>Predict</Text>\r\n                        </TouchableOpacity>\r\n                    )}\r\n                    {predictions.length > 0 && (\r\n                        <View style={styles.predictionsContainer}>\r\n                            <Text style={styles.modelText}>Predictions:</Text>\r\n                            {predictions.map((prediction, i) => (\r\n                        <TouchableOpacity key={i} onPress={() => WebBrowser.openBrowserAsync(`https://www.google.com/search?tbm=isch&q=${encodeURIComponent(prediction.label)}`)}>\r\n                            <Text style={styles.predictions}>{`${i + 1}: ${prediction.label} (${prediction.probability.toFixed(2)})`}</Text>\r\n                        </TouchableOpacity>\r\n                    ))}\r\n                        </View>\r\n                    )}\r\n                </>\r\n            )}\r\n        </ScrollView>\r\n    </View>\r\n);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#F9F7F7',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        width: '100%',\r\n    },\r\n    scrollViewContainer: {\r\n        minWidth: '100%',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    button: {\r\n        padding: 10,\r\n        backgroundColor: '#3F72AF',\r\n        borderRadius: 5,\r\n        margin: 5,\r\n        borderColor: '#112D4E',\r\n        borderWidth: 1,\r\n        shadowColor: '#112D4E',\r\n        shadowOpacity: 0.5,\r\n        shadowRadius: 8,\r\n        shadowOffset: { width: 0, height: 0 },\r\n        elevation: 5,\r\n    },\r\n    predictions: {\r\n        textAlign: 'left',\r\n        color: '#112D4E',\r\n        fontSize: 16,\r\n        margin: 10,\r\n        fontWeight: 'bold',\r\n    },\r\n    modelText: {\r\n        textAlign: 'center',\r\n        fontSize: 22,\r\n        margin: 8,\r\n        fontWeight: 'bold',\r\n    },\r\n    btnText: {\r\n        textAlign: 'center',\r\n        fontSize: 18,\r\n        color: '#F9F7F7',\r\n        fontWeight: '600',\r\n    },\r\n    predictionsContainer: {\r\n        alignItems: 'flex-start',\r\n        justifyContent: 'center',\r\n    },\r\n\r\n\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
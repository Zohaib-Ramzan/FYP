{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { cameraWithTensors } from '@tensorflow/tfjs-react-native';\nimport { Camera } from 'expo-camera';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\nimport * as tf from '@tensorflow/tfjs';\nimport Canvas from 'react-native-canvas';\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TensorCamera = cameraWithTensors(Camera);\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nexport default function ObjectDetection() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    model = _useState2[0],\n    setModel = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isDetecting = _useState4[0],\n    setIsDetecting = _useState4[1];\n  var _useState5 = useState(Camera.Constants.Type.front),\n    _useState6 = _slicedToArray(_useState5, 2),\n    cameraType = _useState6[0],\n    setCameraType = _useState6[1];\n  var context = useRef(null);\n  var canvas = useRef(null);\n  var handleCameraStream = function handleCameraStream(images) {\n    var loop = function () {\n      var _ref = _asyncToGenerator(function* () {\n        if (!isDetecting) {\n          return;\n        }\n        var nextImageTensor = images.next().value;\n        if (model && nextImageTensor) {\n          var predictions = yield model.detect(nextImageTensor);\n          drawRectangle(predictions, nextImageTensor);\n          nextImageTensor.dispose();\n        }\n        requestAnimationFrame(loop);\n      });\n      return function loop() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    loop();\n  };\n  var drawRectangle = function () {\n    var _ref2 = _asyncToGenerator(function* (predictions, nextImageTensor) {\n      var highScorePredictions = predictions.filter(function (prediction) {\n        return prediction.score > 0.3;\n      });\n      if (context.current && canvas.current) {\n        var scaleWidth = width / nextImageTensor.shape[1];\n        var scaleHeight = height / nextImageTensor.shape[0];\n        var flipHorizontal = Platform.OS === 'ios' ? false : true;\n        context.current.clearRect(0, 0, width, height);\n        highScorePredictions.forEach(function () {\n          var _ref3 = _asyncToGenerator(function* (prediction) {\n            var _prediction$bbox = _slicedToArray(prediction.bbox, 4),\n              x = _prediction$bbox[0],\n              y = _prediction$bbox[1],\n              width = _prediction$bbox[2],\n              height = _prediction$bbox[3];\n            var boundingBoxX = flipHorizontal ? canvas.current.width - x * scaleWidth - width * scaleWidth : x * scaleWidth;\n            var boundingBoxY = y * scaleHeight;\n            context.current.strokeRect(boundingBoxX, boundingBoxY, width * scaleWidth, height * scaleHeight);\n            context.current.fillText(`${prediction.class} (${Math.round(prediction.score * 100)}%)`, boundingBoxX > 10 ? boundingBoxX - 10 : 0, boundingBoxY > 10 ? boundingBoxY - 10 : 10);\n          });\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      }\n    });\n    return function drawRectangle(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleCanvas = function handleCanvas(can) {\n    if (can) {\n      can.width = width;\n      can.height = height;\n      var ctx = can.getContext('2d');\n      context.current = ctx;\n      ctx.strokeStyle = 'red';\n      ctx.fillStyle = 'red';\n      ctx.lineWidth = 2;\n      canvas.current = can;\n      ctx.font = '20px helvetica';\n    }\n  };\n  var startDetection = function startDetection() {\n    setIsDetecting(function (detection) {\n      return !detection;\n    });\n  };\n  var switchCamera = function switchCamera() {\n    setCameraType(cameraType === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back);\n  };\n  var textureDims;\n  Platform.OS === 'ios' ? textureDims = {\n    height: 1920,\n    width: 1080\n  } : textureDims = {\n    height: 1200,\n    width: 1600\n  };\n  useEffect(function () {\n    _asyncToGenerator(function* () {\n      var _yield$Camera$request = yield Camera.requestCameraPermissionsAsync(),\n        status = _yield$Camera$request.status;\n      yield tf.ready();\n      setModel(yield cocoSsd.load());\n    })();\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [model && isDetecting && _jsxs(_Fragment, {\n      children: [_jsx(TensorCamera, {\n        style: styles.camera,\n        type: cameraType,\n        cameraTextureHeight: textureDims.height,\n        cameraTextureWidth: textureDims.width,\n        resizeHeight: 200,\n        resizeWidth: 152,\n        resizeDepth: 3,\n        onReady: handleCameraStream,\n        autorender: true\n      }), _jsx(Canvas, {\n        style: styles.canvas,\n        ref: handleCanvas\n      })]\n    }), !model && _jsxs(View, {\n      style: styles.loadingContainer,\n      children: [_jsx(Text, {\n        style: styles.modelText,\n        children: \"Loading model, Please wait..\"\n      }), _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"blue\"\n      })]\n    }), model && _jsx(TouchableOpacity, {\n      style: styles.btn1,\n      onPress: startDetection,\n      children: _jsx(Text, {\n        style: styles.btnText,\n        children: isDetecting ? 'Stop detection' : 'Start detection'\n      })\n    }), isDetecting && _jsx(TouchableOpacity, {\n      style: styles.btn2,\n      onPress: switchCamera,\n      children: _jsx(Text, {\n        style: styles.btnText,\n        children: \"Switch camera\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F9F7F7'\n  },\n  camera: {\n    width: '90%',\n    height: '100%'\n  },\n  canvas: {\n    position: 'absolute',\n    zIndex: 100,\n    width: '100%',\n    height: '100%'\n  },\n  btn1: {\n    bottom: 10,\n    position: 'absolute',\n    padding: 10,\n    backgroundColor: '#3F72AF',\n    borderRadius: 5,\n    margin: 5,\n    borderColor: '#112D4E',\n    borderWidth: 1,\n    shadowColor: '#112D4E',\n    shadowOpacity: 0.5,\n    shadowRadius: 8,\n    shadowOffset: {\n      width: 0,\n      height: 0\n    },\n    elevation: 5,\n    zIndex: 120\n  },\n  btn2: {\n    bottom: 60,\n    position: 'absolute',\n    padding: 10,\n    backgroundColor: '#3F72AF',\n    borderRadius: 5,\n    margin: 5,\n    borderColor: '#112D4E',\n    borderWidth: 1,\n    shadowColor: '#112D4E',\n    shadowOpacity: 0.5,\n    shadowRadius: 8,\n    shadowOffset: {\n      width: 0,\n      height: 0\n    },\n    elevation: 5,\n    zIndex: 120\n  },\n  btnText: {\n    textAlign: 'center',\n    fontSize: 16,\n    color: '#F9F7F7',\n    fontWeight: '600'\n  },\n  modelText: {\n    textAlign: 'center',\n    fontSize: 22,\n    margin: 8,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"names":["React","useEffect","useRef","useState","cameraWithTensors","Camera","cocoSsd","tf","Canvas","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","TensorCamera","_Dimensions$get","Dimensions","get","width","height","ObjectDetection","_useState","_useState2","_slicedToArray","model","setModel","_useState3","_useState4","isDetecting","setIsDetecting","_useState5","Constants","Type","front","_useState6","cameraType","setCameraType","context","canvas","handleCameraStream","images","loop","_ref","_asyncToGenerator","nextImageTensor","next","value","predictions","detect","drawRectangle","dispose","requestAnimationFrame","apply","arguments","_ref2","highScorePredictions","filter","prediction","score","current","scaleWidth","shape","scaleHeight","flipHorizontal","Platform","OS","clearRect","forEach","_ref3","_prediction$bbox","bbox","x","y","boundingBoxX","boundingBoxY","strokeRect","fillText","class","Math","round","_x3","_x","_x2","handleCanvas","can","ctx","getContext","strokeStyle","fillStyle","lineWidth","font","startDetection","detection","switchCamera","back","textureDims","_yield$Camera$request","requestCameraPermissionsAsync","status","ready","load","View","style","styles","container","children","camera","type","cameraTextureHeight","cameraTextureWidth","resizeHeight","resizeWidth","resizeDepth","onReady","autorender","ref","loadingContainer","Text","modelText","ActivityIndicator","size","color","TouchableOpacity","btn1","onPress","btnText","btn2","StyleSheet","create","flex","backgroundColor","justifyContent","alignItems","position","zIndex","bottom","padding","borderRadius","margin","borderColor","borderWidth","shadowColor","shadowOpacity","shadowRadius","shadowOffset","elevation","textAlign","fontSize","fontWeight"],"sources":["D:/TensorflowReactNative/Components/ObjectDetection.js"],"sourcesContent":["import { StyleSheet, View, Dimensions, Platform, ActivityIndicator, TouchableOpacity, Text } from 'react-native';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { cameraWithTensors } from '@tensorflow/tfjs-react-native';\r\nimport { Camera } from 'expo-camera';\r\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport Canvas from 'react-native-canvas';\r\n\r\nconst TensorCamera = cameraWithTensors(Camera);\r\n\r\nconst { width, height } = Dimensions.get('window');\r\n\r\nexport default function ObjectDetection() {\r\n    const [model, setModel] = useState(null);\r\n    const [isDetecting, setIsDetecting] = useState(false);\r\n    const [cameraType, setCameraType] = useState(Camera.Constants.Type.front);\r\n    let context = useRef(null);\r\n    const canvas = useRef(null);\r\n\r\n    const handleCameraStream = (images) => {\r\n        const loop = async () => {\r\n            if (!isDetecting) {\r\n                return;\r\n            }\r\n\r\n            const nextImageTensor = images.next().value;\r\n\r\n            if (model && nextImageTensor) {\r\n                const predictions = await model.detect(nextImageTensor);\r\n                drawRectangle(predictions, nextImageTensor);\r\n\r\n                // Dispose of tensor to free up memory\r\n                nextImageTensor.dispose();\r\n            }\r\n\r\n            requestAnimationFrame(loop);\r\n        };\r\n        loop();\r\n    };\r\n\r\n    const drawRectangle = async (predictions, nextImageTensor) => {\r\n        const highScorePredictions = predictions.filter(prediction => prediction.score > 0.3);\r\n        if (context.current && canvas.current) {\r\n            const scaleWidth = width / nextImageTensor.shape[1];\r\n            const scaleHeight = height / nextImageTensor.shape[0];\r\n\r\n            const flipHorizontal = Platform.OS === 'ios' ? false : true;\r\n\r\n            context.current.clearRect(0, 0, width, height);\r\n\r\n            highScorePredictions.forEach(async prediction => {\r\n                const [x, y, width, height] = prediction.bbox;\r\n\r\n                const boundingBoxX = flipHorizontal\r\n                    ? canvas.current.width - x * scaleWidth - width * scaleWidth\r\n                    : x * scaleWidth;\r\n                const boundingBoxY = y * scaleHeight;\r\n\r\n                context.current.strokeRect(\r\n                    boundingBoxX,\r\n                    boundingBoxY,\r\n                    width * scaleWidth,\r\n                    height * scaleHeight\r\n                );\r\n\r\n                context.current.fillText(\r\n                    `${prediction.class} (${Math.round(prediction.score * 100)}%)`,\r\n                    boundingBoxX > 10 ? boundingBoxX - 10 : 0,\r\n                    boundingBoxY > 10 ? boundingBoxY - 10 : 10\r\n                );\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    const handleCanvas = (can) => {\r\n        if (can) {\r\n            can.width = width;\r\n            can.height = height;\r\n            const ctx = can.getContext('2d');\r\n            context.current = ctx;\r\n            ctx.strokeStyle = 'red';\r\n            ctx.fillStyle = 'red';\r\n            ctx.lineWidth = 2;\r\n            canvas.current = can;\r\n            ctx.font = '20px helvetica';\r\n        }\r\n    };\r\n\r\n    const startDetection = () => {\r\n        setIsDetecting((detection) => !detection);\r\n    };\r\n\r\n    const switchCamera = () => {\r\n        setCameraType(\r\n            cameraType === Camera.Constants.Type.back\r\n                ? Camera.Constants.Type.front\r\n                : Camera.Constants.Type.back\r\n        );\r\n    };\r\n\r\n    let textureDims;\r\n    Platform.OS === 'ios'\r\n        ? (textureDims = { height: 1920, width: 1080 })\r\n        : (textureDims = { height: 1200, width: 1600 });\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const { status } = await Camera.requestCameraPermissionsAsync();\r\n            await tf.ready();\r\n            setModel(await cocoSsd.load());\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            {model && isDetecting && (\r\n                <>\r\n                    <TensorCamera\r\n                        style={styles.camera}\r\n                        type={cameraType}\r\n                        cameraTextureHeight={textureDims.height}\r\n                        cameraTextureWidth={textureDims.width}\r\n                        resizeHeight={200}\r\n                        resizeWidth={152}\r\n                        resizeDepth={3}\r\n                        onReady={handleCameraStream}\r\n                        autorender={true}\r\n                    />\r\n                    <Canvas style={styles.canvas} ref={handleCanvas} />\r\n                </>\r\n            )}\r\n            {!model &&\r\n                <View style={styles.loadingContainer}>\r\n                    <Text style={styles.modelText}>Loading model, Please wait..</Text>\r\n                    <ActivityIndicator size=\"large\" color=\"blue\" />\r\n                </View>\r\n\r\n            }\r\n            {model && (\r\n                <TouchableOpacity style={styles.btn1} onPress={startDetection}>\r\n                    <Text style={styles.btnText}>{isDetecting ? 'Stop detection' : 'Start detection'}</Text>\r\n                </TouchableOpacity>\r\n            )}\r\n            {isDetecting && <TouchableOpacity style={styles.btn2} onPress={switchCamera}>\r\n                <Text style={styles.btnText}>Switch camera</Text>\r\n            </TouchableOpacity>}\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#F9F7F7',\r\n    },\r\n    camera: {\r\n        width: '90%',\r\n        height: '100%',\r\n    },\r\n    canvas: {\r\n        position: 'absolute',\r\n        zIndex: 100,\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    btn1: {\r\n        bottom: 10,\r\n        position: 'absolute',\r\n        padding: 10,\r\n        backgroundColor: '#3F72AF',\r\n        borderRadius: 5,\r\n        margin: 5,\r\n        borderColor: '#112D4E',\r\n        borderWidth: 1,\r\n        shadowColor: '#112D4E',\r\n        shadowOpacity: 0.5,\r\n        shadowRadius: 8,\r\n        shadowOffset: { width: 0, height: 0 },\r\n        elevation: 5,\r\n        zIndex: 120,\r\n    },\r\n    btn2: {\r\n        bottom: 60,\r\n        position: 'absolute',\r\n        padding: 10,\r\n        backgroundColor: '#3F72AF',\r\n        borderRadius: 5,\r\n        margin: 5,\r\n        borderColor: '#112D4E',\r\n        borderWidth: 1,\r\n        shadowColor: '#112D4E',\r\n        shadowOpacity: 0.5,\r\n        shadowRadius: 8,\r\n        shadowOffset: { width: 0, height: 0 },\r\n        elevation: 5,\r\n        zIndex: 120,\r\n    },\r\n    btnText: {\r\n        textAlign: 'center',\r\n        fontSize: 16,\r\n        color: '#F9F7F7',\r\n        fontWeight: '600',\r\n    },\r\n    modelText: {\r\n        textAlign: 'center',\r\n        fontSize: 22,\r\n        margin: 8,\r\n        fontWeight: 'bold',\r\n    },\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
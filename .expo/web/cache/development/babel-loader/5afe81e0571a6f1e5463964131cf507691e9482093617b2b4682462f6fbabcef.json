{"ast":null,"code":"import { FlipType, SaveFormat } from \"./ImageManipulator.types\";\nexport function validateArguments(uri, actions, saveOptions) {\n  validateUri(uri);\n  validateActions(actions);\n  validateSaveOptions(saveOptions);\n}\nexport function validateUri(uri) {\n  if (!(typeof uri === 'string')) {\n    throw new TypeError('The \"uri\" argument must be a string');\n  }\n}\nexport function validateActions(actions) {\n  if (!Array.isArray(actions)) {\n    throw new TypeError('The \"actions\" argument must be an array');\n  }\n  for (var action of actions) {\n    if (typeof action !== 'object' || action === null) {\n      throw new TypeError('Action must be an object');\n    }\n    var supportedActionTypes = ['crop', 'extent', 'flip', 'rotate', 'resize'];\n    var actionKeys = Object.keys(action);\n    if (actionKeys.length !== 1) {\n      throw new TypeError(`Single action must contain exactly one transformation: ${supportedActionTypes.join(', ')}`);\n    }\n    var actionType = actionKeys[0];\n    if (!supportedActionTypes.includes(actionType)) {\n      throw new TypeError(`Unsupported action type: ${actionType}`);\n    }\n    if (actionType === 'crop') {\n      validateCropAction(action);\n    } else if (actionType === 'extent') {\n      validateExtentAction(action);\n    } else if (actionType === 'flip') {\n      validateFlipAction(action);\n    } else if (actionType === 'rotate') {\n      validateRotateAction(action);\n    } else if (actionType === 'resize') {\n      validateResizeAction(action);\n    }\n  }\n}\nfunction validateCropAction(action) {\n  var isValid = typeof action.crop === 'object' && action.crop !== null && typeof action.crop.originX === 'number' && typeof action.crop.originY === 'number' && typeof action.crop.width === 'number' && typeof action.crop.height === 'number';\n  if (!isValid) {\n    throw new TypeError('Crop action must be an object of shape { originX: number; originY: number; width: number; height: number }');\n  }\n}\nfunction validateExtentAction(action) {\n  var isValid = typeof action.extent === 'object' && action.extent !== null && (action.extent.backgroundColor == null || typeof action.extent.backgroundColor === 'string') && (action.extent.originX == null || typeof action.extent.originX === 'number') && (action.extent.originY == null || typeof action.extent.originY === 'number') && typeof action.extent.width === 'number' && typeof action.extent.height === 'number';\n  if (!isValid) {\n    throw new TypeError('Extent action must be an object of shape { backgroundColor?: string; originX?: number; originY?: number; width: number; height: number }');\n  }\n}\nfunction validateFlipAction(action) {\n  if (typeof action.flip !== 'string' || ![FlipType.Horizontal, FlipType.Vertical].includes(action.flip)) {\n    throw new TypeError(`Unsupported flip type: ${action.flip}`);\n  }\n}\nfunction validateRotateAction(action) {\n  if (typeof action.rotate !== 'number') {\n    throw new TypeError('Rotation must be a number');\n  }\n}\nfunction validateResizeAction(action) {\n  var isValid = typeof action.resize === 'object' && action.resize !== null && (typeof action.resize.width === 'number' || typeof action.resize.width === 'undefined') && (typeof action.resize.height === 'number' || typeof action.resize.height === 'undefined');\n  if (!isValid) {\n    throw new TypeError('Resize action must be an object of shape { width?: number; height?: number }');\n  }\n}\nexport function validateSaveOptions(_ref) {\n  var base64 = _ref.base64,\n    compress = _ref.compress,\n    format = _ref.format;\n  if (base64 !== undefined && typeof base64 !== 'boolean') {\n    throw new TypeError('The \"base64\" argument must be a boolean');\n  }\n  if (compress !== undefined) {\n    if (typeof compress !== 'number') {\n      throw new TypeError('The \"compress\" argument must be a number');\n    }\n    if (compress < 0 || compress > 1) {\n      throw new TypeError('The \"compress\" argument must be a number between 0 and 1');\n    }\n  }\n  var allowedFormats = [SaveFormat.JPEG, SaveFormat.PNG, SaveFormat.WEBP];\n  if (format !== undefined && !allowedFormats.includes(format)) {\n    throw new TypeError(`The \"format\" argument must be one of: ${allowedFormats.join(', ')}`);\n  }\n}","map":{"version":3,"names":["FlipType","SaveFormat","validateArguments","uri","actions","saveOptions","validateUri","validateActions","validateSaveOptions","TypeError","Array","isArray","action","supportedActionTypes","actionKeys","Object","keys","length","join","actionType","includes","validateCropAction","validateExtentAction","validateFlipAction","validateRotateAction","validateResizeAction","isValid","crop","originX","originY","width","height","extent","backgroundColor","flip","Horizontal","Vertical","rotate","resize","_ref","base64","compress","format","undefined","allowedFormats","JPEG","PNG","WEBP"],"sources":["D:\\TensorflowReactNative\\node_modules\\expo-image-manipulator\\src\\validators.ts"],"sourcesContent":["import {\n  Action,\n  ActionCrop,\n  ActionExtent,\n  ActionFlip,\n  ActionResize,\n  ActionRotate,\n  FlipType,\n  SaveFormat,\n  SaveOptions,\n} from './ImageManipulator.types';\n\nexport function validateArguments(uri: string, actions: Action[], saveOptions: SaveOptions) {\n  validateUri(uri);\n  validateActions(actions);\n  validateSaveOptions(saveOptions);\n}\n\nexport function validateUri(uri: string): void {\n  if (!(typeof uri === 'string')) {\n    throw new TypeError('The \"uri\" argument must be a string');\n  }\n}\n\nexport function validateActions(actions: Action[]): void {\n  if (!Array.isArray(actions)) {\n    throw new TypeError('The \"actions\" argument must be an array');\n  }\n  for (const action of actions) {\n    if (typeof action !== 'object' || action === null) {\n      throw new TypeError('Action must be an object');\n    }\n    const supportedActionTypes = ['crop', 'extent', 'flip', 'rotate', 'resize'];\n    const actionKeys = Object.keys(action);\n    if (actionKeys.length !== 1) {\n      throw new TypeError(\n        `Single action must contain exactly one transformation: ${supportedActionTypes.join(', ')}`\n      );\n    }\n    const actionType = actionKeys[0];\n    if (!supportedActionTypes.includes(actionType)) {\n      throw new TypeError(`Unsupported action type: ${actionType}`);\n    }\n\n    if (actionType === 'crop') {\n      validateCropAction(action as ActionCrop);\n    } else if (actionType === 'extent') {\n      validateExtentAction(action as ActionExtent);\n    } else if (actionType === 'flip') {\n      validateFlipAction(action as ActionFlip);\n    } else if (actionType === 'rotate') {\n      validateRotateAction(action as ActionRotate);\n    } else if (actionType === 'resize') {\n      validateResizeAction(action as ActionResize);\n    }\n  }\n}\n\nfunction validateCropAction(action: ActionCrop): void {\n  const isValid =\n    typeof action.crop === 'object' &&\n    action.crop !== null &&\n    typeof action.crop.originX === 'number' &&\n    typeof action.crop.originY === 'number' &&\n    typeof action.crop.width === 'number' &&\n    typeof action.crop.height === 'number';\n  if (!isValid) {\n    throw new TypeError(\n      'Crop action must be an object of shape { originX: number; originY: number; width: number; height: number }'\n    );\n  }\n}\n\nfunction validateExtentAction(action: ActionExtent): void {\n  const isValid =\n    typeof action.extent === 'object' &&\n    action.extent !== null &&\n    (action.extent.backgroundColor == null || typeof action.extent.backgroundColor === 'string') &&\n    (action.extent.originX == null || typeof action.extent.originX === 'number') &&\n    (action.extent.originY == null || typeof action.extent.originY === 'number') &&\n    typeof action.extent.width === 'number' &&\n    typeof action.extent.height === 'number';\n  if (!isValid) {\n    throw new TypeError(\n      'Extent action must be an object of shape { backgroundColor?: string; originX?: number; originY?: number; width: number; height: number }'\n    );\n  }\n}\n\nfunction validateFlipAction(action: ActionFlip): void {\n  if (\n    typeof action.flip !== 'string' ||\n    ![FlipType.Horizontal, FlipType.Vertical].includes(action.flip)\n  ) {\n    throw new TypeError(`Unsupported flip type: ${action.flip}`);\n  }\n}\n\nfunction validateRotateAction(action: ActionRotate): void {\n  if (typeof action.rotate !== 'number') {\n    throw new TypeError('Rotation must be a number');\n  }\n}\n\nfunction validateResizeAction(action: ActionResize): void {\n  const isValid =\n    typeof action.resize === 'object' &&\n    action.resize !== null &&\n    (typeof action.resize.width === 'number' || typeof action.resize.width === 'undefined') &&\n    (typeof action.resize.height === 'number' || typeof action.resize.height === 'undefined');\n  if (!isValid) {\n    throw new TypeError(\n      'Resize action must be an object of shape { width?: number; height?: number }'\n    );\n  }\n}\n\nexport function validateSaveOptions({ base64, compress, format }: SaveOptions): void {\n  if (base64 !== undefined && typeof base64 !== 'boolean') {\n    throw new TypeError('The \"base64\" argument must be a boolean');\n  }\n  if (compress !== undefined) {\n    if (typeof compress !== 'number') {\n      throw new TypeError('The \"compress\" argument must be a number');\n    }\n    if (compress < 0 || compress > 1) {\n      throw new TypeError('The \"compress\" argument must be a number between 0 and 1');\n    }\n  }\n  const allowedFormats = [SaveFormat.JPEG, SaveFormat.PNG, SaveFormat.WEBP];\n  if (format !== undefined && !allowedFormats.includes(format)) {\n    throw new TypeError(`The \"format\" argument must be one of: ${allowedFormats.join(', ')}`);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
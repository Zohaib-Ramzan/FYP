{"ast":null,"code":"import { CodedError } from 'expo-modules-core';\nimport { getContext } from \"../utils/getContext.web\";\nexport default (function (canvas, options) {\n  var _options$backgroundCo = options.backgroundColor,\n    backgroundColor = _options$backgroundCo === void 0 ? null : _options$backgroundCo,\n    _options$originX = options.originX,\n    originX = _options$originX === void 0 ? 0 : _options$originX,\n    _options$originY = options.originY,\n    originY = _options$originY === void 0 ? 0 : _options$originY,\n    _options$width = options.width,\n    width = _options$width === void 0 ? 0 : _options$width,\n    _options$height = options.height,\n    height = _options$height === void 0 ? 0 : _options$height;\n  if (width === 0 || height === 0) {\n    throw new CodedError('ERR_IMAGE_MANIPULATOR_EXTENT', 'Extent size must be greater than 0: ' + JSON.stringify(options, null, 2));\n  }\n  var result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n  var sx = originX < 0 ? 0 : originX;\n  var sy = originY < 0 ? 0 : originY;\n  var sw = originX < 0 ? Math.min(canvas.width, width + originX) : Math.min(canvas.width - originX, width);\n  var sh = originY < 0 ? Math.min(canvas.height, height + originY) : Math.min(canvas.height - originY, height);\n  var dx = originX < 0 ? -originX : 0;\n  var dy = originY < 0 ? -originY : 0;\n  var context = getContext(result);\n  if (backgroundColor != null) {\n    context.fillStyle = backgroundColor;\n    context.fillRect(0, 0, width, height);\n  }\n  context.drawImage(canvas, sx, sy, sw, sh, dx, dy, sw, sh);\n  return result;\n});","map":{"version":3,"names":["CodedError","getContext","canvas","options","_options$backgroundCo","backgroundColor","_options$originX","originX","_options$originY","originY","_options$width","width","_options$height","height","JSON","stringify","result","document","createElement","sx","sy","sw","Math","min","sh","dx","dy","context","fillStyle","fillRect","drawImage"],"sources":["D:\\TensorflowReactNative\\node_modules\\expo-image-manipulator\\src\\actions\\ExtentAction.web.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { ActionExtent } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nexport default (canvas: HTMLCanvasElement, options: ActionExtent['extent']) => {\n  // ensure values are defined.\n  const { backgroundColor = null, originX = 0, originY = 0, width = 0, height = 0 } = options;\n\n  if (width === 0 || height === 0) {\n    throw new CodedError(\n      'ERR_IMAGE_MANIPULATOR_EXTENT',\n      'Extent size must be greater than 0: ' + JSON.stringify(options, null, 2)\n    );\n  }\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const sx = originX < 0 ? 0 : originX;\n  const sy = originY < 0 ? 0 : originY;\n  const sw =\n    originX < 0 ? Math.min(canvas.width, width + originX) : Math.min(canvas.width - originX, width);\n  const sh =\n    originY < 0\n      ? Math.min(canvas.height, height + originY)\n      : Math.min(canvas.height - originY, height);\n\n  const dx = originX < 0 ? -originX : 0;\n  const dy = originY < 0 ? -originY : 0;\n\n  const context = getContext(result);\n\n  if (backgroundColor != null) {\n    context.fillStyle = backgroundColor;\n    context.fillRect(0, 0, width, height);\n  }\n\n  context.drawImage(canvas, sx, sy, sw, sh, dx, dy, sw, sh);\n\n  return result;\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,mBAAmB;AAG9C,SAASC,UAAU;AAEnB,gBAAe,UAACC,MAAyB,EAAEC,OAA+B,EAAI;EAE5E,IAAAC,qBAAA,GAAoFD,OAAO,CAAnFE,eAAe;IAAfA,eAAe,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,gBAAA,GAAsDH,OAAO,CAA3DI,OAAO;IAAPA,OAAO,GAAAD,gBAAA,cAAG,CAAC,GAAAA,gBAAA;IAAAE,gBAAA,GAAyCL,OAAO,CAA9CM,OAAO;IAAPA,OAAO,GAAAD,gBAAA,cAAG,CAAC,GAAAA,gBAAA;IAAAE,cAAA,GAA4BP,OAAO,CAAjCQ,KAAK;IAALA,KAAK,GAAAD,cAAA,cAAG,CAAC,GAAAA,cAAA;IAAAE,eAAA,GAAiBT,OAAO,CAAtBU,MAAM;IAANA,MAAM,GAAAD,eAAA,cAAG,CAAC,GAAAA,eAAA;EAE/E,IAAID,KAAK,KAAK,CAAC,IAAIE,MAAM,KAAK,CAAC,EAAE;IAC/B,MAAM,IAAIb,UAAU,CAClB,8BAA8B,EAC9B,sCAAsC,GAAGc,IAAI,CAACC,SAAS,CAACZ,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAC1E;;EAGH,IAAMa,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC/CF,MAAM,CAACL,KAAK,GAAGA,KAAK;EACpBK,MAAM,CAACH,MAAM,GAAGA,MAAM;EAEtB,IAAMM,EAAE,GAAGZ,OAAO,GAAG,CAAC,GAAG,CAAC,GAAGA,OAAO;EACpC,IAAMa,EAAE,GAAGX,OAAO,GAAG,CAAC,GAAG,CAAC,GAAGA,OAAO;EACpC,IAAMY,EAAE,GACNd,OAAO,GAAG,CAAC,GAAGe,IAAI,CAACC,GAAG,CAACrB,MAAM,CAACS,KAAK,EAAEA,KAAK,GAAGJ,OAAO,CAAC,GAAGe,IAAI,CAACC,GAAG,CAACrB,MAAM,CAACS,KAAK,GAAGJ,OAAO,EAAEI,KAAK,CAAC;EACjG,IAAMa,EAAE,GACNf,OAAO,GAAG,CAAC,GACPa,IAAI,CAACC,GAAG,CAACrB,MAAM,CAACW,MAAM,EAAEA,MAAM,GAAGJ,OAAO,CAAC,GACzCa,IAAI,CAACC,GAAG,CAACrB,MAAM,CAACW,MAAM,GAAGJ,OAAO,EAAEI,MAAM,CAAC;EAE/C,IAAMY,EAAE,GAAGlB,OAAO,GAAG,CAAC,GAAG,CAACA,OAAO,GAAG,CAAC;EACrC,IAAMmB,EAAE,GAAGjB,OAAO,GAAG,CAAC,GAAG,CAACA,OAAO,GAAG,CAAC;EAErC,IAAMkB,OAAO,GAAG1B,UAAU,CAACe,MAAM,CAAC;EAElC,IAAIX,eAAe,IAAI,IAAI,EAAE;IAC3BsB,OAAO,CAACC,SAAS,GAAGvB,eAAe;IACnCsB,OAAO,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAElB,KAAK,EAAEE,MAAM,CAAC;;EAGvCc,OAAO,CAACG,SAAS,CAAC5B,MAAM,EAAEiB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEG,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEL,EAAE,EAAEG,EAAE,CAAC;EAEzD,OAAOR,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}